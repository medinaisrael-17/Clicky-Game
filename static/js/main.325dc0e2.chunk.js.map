{"version":3,"sources":["components/CharacterCard/index.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","alt","name","src","image","key","id","class","onClick","changeState","GameContainer","state","characters","score","topScore","anotherFunction","_this","clicked","shuffledArr","shuffle","setState","map","i","alert","copy","Object","toConsumableArray","array","length","random","Math","floor","temp","_this2","this","character","components_CharacterCard","Component","App","components_GameContainer","width","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.325dc0e2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n    return(\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt = {props.name} src = {props.image} \n                key={props.id} id = {props.id} class = \"characterImage\"\n                onClick= {() => props.changeState(props.id)}\n                />\n            </div>\n        </div> \n    )\n}\n\nexport default CharacterCard;","import React, { Component } from \"react\";\nimport CharacterCard from \"./CharacterCard\";\nimport characters from \"./characters.json\";\nimport \"./style.css\"\n\n\nclass GameContainer extends Component {\n    state = {\n        characters,\n        score: 0,\n        topScore: 0\n    };\n\n    // determining if the id has been clicked on\n    anotherFunction = id => {\n        // if it has \n        if (this.state.characters[id].clicked === true) {\n            //shuffle\n            const shuffledArr = this.shuffle(this.state.characters);\n\n            if (this.state.score > this.state.topScore){\n                this.setState({topScore: this.state.score});\n                // document.getElementById(\"topScore\").text(this.state.topScore)\n            }\n            \n\n            //reset all to false\n            shuffledArr.map( i => i.clicked = false)\n            //the user lost and we need to change our state\n            this.setState({ score: 0 , characters: shuffledArr });\n            // document.getElementById(\"currentScore\").text(this.state.score)\n\n            alert(\"You lost :-(\")\n        }\n        // if not \n        if (this.state.characters[id].clicked === false) {\n            const copy = [...characters]\n\n            copy[id].clicked = true\n            // shuffle\n            const shuffledArr = this.shuffle(copy);\n            //increase the score\n            this.setState({ score: this.state.score + 1, characters: shuffledArr });\n\n            // document.getElementById(\"currentScore\").text(this.state.score)\n        }\n        // const shuffledArr = this.shuffle(this.state.characters);\n        // this.setState({ score: this.state.score + 1, characters: shuffledArr });\n    }\n\n    shuffle = array => {\n        for (let i = 0; i < array.length; i++) {\n            const random = Math.floor(Math.random() * array.length);\n            let temp = array[i];\n            array[i] = array[random];\n            array[random] = temp;\n        }\n        return array;\n    }\n\n\n    render() {\n        return (\n            <div class=\"characterDiv\">\n                {this.state.characters.map(character => (\n                    <CharacterCard id = {character.id}\n                    key = {character.id}\n                    name = {character.name}\n                    image = {character.image}\n                    changeState = {this.anotherFunction}/>\n                ))}\n            </div>\n        )\n    }\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport './App.css';\nimport GameContainer from \"./components/GameContainer\"\n\nfunction App() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\" id = \"navbar\">\n        <span className=\"navbar-brand\">Clicky Game</span>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <div id=\"userGuess\">\n            <span className=\"navbar-brand\" id=\"correctGuess\">Click An Image to Begin!</span>\n          </div>\n\n          <div id=\"scoreDiv\">\n            <span className=\"navbar-brand\">Score: <span id=\"currentScore\"></span></span>\n\n            <span id=\"divider\" className=\"navbard-brand\">|</span>\n\n            <span className=\"navbar-brand\">Top Score: <span id=\"topScore\"></span> </span>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Clicky Game!</h1>\n          <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n      </div>\n\n      <div id = \"gameContainer\">\n        <GameContainer />\n      </div>\n\n      <nav className=\"navbar navbar-light bg-light\">\n        <div className=\"navbar-brand\">\n          <img src=\"https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"react\"/>\n          MADE WITH REACT\n        </div>\n      </nav>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}